{
  "name": "you",
  "description": "一个简单，灵活的前端开发环境构建工具。只需简单的配置，就可以快速搭建一个功能众多的前端开发环境。",
  "author": {
    "name": "Stri",
    "email": "stri.vip@gmail.com",
    "url": "http://weibo/stri"
  },
  "contributors": [
    {
      "name": "Stri",
      "email": "stri.vip@gmail.com"
    }
  ],
  "bugs": {
    "url": "https://github.com/stri/you/issues",
    "email": "stri.vip@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/stri/you.git"
  },
  "version": "0.1.5",
  "main": "./index.js",
  "bin": {
    "you": "./bin/you"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "dependencies": {
    "less": "1.5.1",
    "mkdirp": "0.3.5",
    "node-sass": "0.7.0",
    "uglify-js": "2.3.6",
    "optimist": "0.5.0",
    "express": "3.2.5",
    "clean-css": "1.1.3"
  },
  "readme": "### `you`前端开发工具\n\n#### 简述\n\n> 一个简单，灵活的前端开发环境构建工具。只需简单的配置，就可以快速搭建一个功能众多的前端开发环境。\n\n#### 特点：\n\n* 它是基于`nodeJS`,能够安装 `nodeJS`的地方，都可以使用；\n* 它是简单的，使用简单，配置简单；\n* 它是灵活的，可以通过安装自定义插件，来扩展you工具；\n\n#### 安装\n\n\tnpm install you -g\n\n\n### 初级篇\n\n==============================\n\n#### 使用：开发（以下只是简单的配置，更多配置：[配置](https://github.com/stri/you/blob/you.4.0.beta/config/default.json)）\n\n1. 确定自己的开发环境空间目录,例如是:`/Users/mac/Documents/`,可以配置如下:\n\n\t\tyou root /Users/mac/Documents/ -c\n\n2. 确定服务使用的端口，默认为80,可以更改，如下\n\t\n\t\tyou port 8080 -c\n\n3. 确定自己开发中JS和CSS的合并方式和编译方式(这个适用于CSS，使用SASS和LESS)，如下\n\n\t\t// 假如使用的JS是$import(类Java的包引用方式)，则配置如下\n\t\tyou js_package_depend_style import -c\n\n\t\t// 假如使用的CSS的编译方式是SASS\n\t\tyou css_package_depend_style sass -c\n\n3. 如果上一步使用的是`SASS`编译CSS时，都想通过.css后缀访问，则可设置如下:\n\t\t\n\t\tyou export_by_css_style true -c\n\t\t\n4. 可以使用了，启动服务。OK，已经完成。\n\n\t\tyou -r 或 you --run\n\t\t\n\n#### 使用：测试\n\n测试时，我们对代码要合并、压缩、打包，会有如下需求：\n\n1. 设置CSS和JS为需要压缩\n\n\t\tyou css_compress true -c\n\t\tyou js_compress true -c\n\n2. 设置CSS中图片是否需求版本号，设置成功后，将会以文件的`md5`值作为其版本号\n\n\t\tyou css_image_version true -c\n\n#### 使用：上线\n\n1. 设置要打包的目录\n\n\t\tyou js_compress_path /page/ -c\n\t\tyou css_compress_path /page/ -c\n\n2. 设置打包出错时，是否忽略\n\n\t\tyou remove_error_file true -c\n3. 从SVN代码仓库中开发打包\n\n\t\tyou http://svn /目录路径/ -d -u 帐号 -p 密码\n\t\n\n\n==============================\n\n### 高级篇\n\n=============================\n > 如上，在使用时，要配置很多参数，如果要使用扩展插件的话，参数或许更多，这是不是太麻烦了，是的，但如果你使用导入配置功能，可以方便在各种配置的切换。\n\n#### 导入自定义配置(支持http或https)\n\n\tyou http://xxx.com/config.json --install --config 或\n\tyou http://xxx.com/config.json -i -c \n\n\n\n>  默认配置的`js_package_depend_style`只支持`import`,`you`两种包合并方式，满足不了我自己的代码包合并方式呀？下面，介绍`you`强大的扩展性。\n\n#### 工具也是对象\n\n它是工具，但在代码上，它是一个对象，一个`you`对象，它由五大核心构建成来。\n\n* 配置对象:`you.getConfigObject`\n\t\n* 合并对象:`you.getCombineObject`\n\t\n* Http服务对象:`you.getServerObject`\n\t\n* 插件对象:`you.getPluginObject`\n\t\n* 任务对象: `you.getTaskObject`\n\n##### `you.getConfigObject`\n\n* `getConfig([name],callback)`:获取配置参数,当`name`存在时，则获取的是`name`的值，例子：\n\n\t\tvar configObject = you.getConfigObject();\n\t\tconfigObject.getConfig(function(data){\n\t\t\tconsole.log(data);\n\t\t});\n\n* `setConfig(name,value[,force])`: 设置配置参数,默认只是修改已存在的参数，如果想要添加参数，则配置`force`为`true`\n\n* `installConfig(uri,callback)`:导入配置文件\n\n##### `you.getCombineObject(Opts[,callback])`\n\n* `you.getCombineObject.pack`,包合并方式\n\n* 参数`Opts`:\n\n\t* `config`:\t配置参数\n\t* `file`: 要合并的文件\n\t\n\t\t* `path`: 文件的路径\n\t\t* `type`: 文件的类型\n\t\t* `contentType`: 文件的`contentType`\n\t\n\t* `req`: 请求的`request`（只要在有http服务的环境下存在）\n\t* `res`: 响应的`response`（只要在有http服务的环境下存在）\n\t\n* 参数`callback`: 合并完的回调\n\n##### `you.getServerObject`\n\n暂不支持扩展\n\n##### `you.getPluginObject`\n\n* `install(uri,callback)`：安装插件\n\n##### `you.getTaskObject`\n\n包合并生成文件的任务对象\n\n\n> 有几个对象，就可以方便扩展`you`，使用功能更强大\n\n\n====================================\n## 例一：做一个添加注释的插件\n\n代码如下：\n\n\t\tmodule.exports = function(you) {\n\t\t\tvar combine = you.getCombineObject();\n\n\n\t\t\tfunction addComment(Opts) {\n\t\t\t\tif (Opts.file.type == 'js') {\n\t\t\t\t\treturn '// 这里JS注释\\n';\n\t\t\t\t}\n\n\t\t\t\tif (Opts.file.type == 'css') {\n\t\t\t\t\treturn '// 这里CSS注释\\n';\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tyou.getCombineObject = function(Opts, callback) {\n\t\t\t\treturn combine(Opts, function(code) {\n\t\t\t\t\tcode = addComment(Opts) + code;\n\t\t\t\t\tcallback && callback(code);\n\t\t\t\t\treturn code;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn you;\n\t\t};\n\t\t\n\t\t\n假如它的URL为: [https://raw2.github.com/stri/you/you.4.0.beta/demo/addComment.js](https://raw2.github.com/stri/you/you.4.0.beta/demo/addComment.js)\n\n则只需\n\n\tyou install https://raw2.github.com/stri/you/you.4.0.beta/demo/addComment.js\n\n安装成功后，之后，重新启动，便可以使用\n\n\tyou -r 或 you --run\n\n\n================= \n\n## 例二：集成一个打包工具\n\n第一步：得有一个针对自己JS和CSS包的打包工具，比如放在`npm`里，假如这个打包工具叫做A,这个工具可能需要配置一些参数，如有公共包的时候，公共包的路径等\n\n第二步：构建一个集成上一步打包工具A的简单js\n\n\t\tvar A = require('A');\n\n\t\tmodule.exports = function(you){\n\n\t\t\t// 添加A打包模块\n\t\t\tyou.getCombineObject.pack.js['A'] = {\n\t\t\t\tcombine: function(Opts,callback){\n\t\t\t\t\tvar config = Opts.config; // 筛选自己用的配置参数\n\n\t\t\t\t\tvar code = A(config);\n\n\t\t\t\t\tcallback(code);\n\n\t\t\t\t\t// 以下是可选，如果配置，则可以使用you默认的`unique_js`功能，来减少同文件夹里的JS在同一页面中应用中的冗余JS代码\n\t\t\t\t\treturn {\n\t\t        \t  filePath: 'xx', // 当前路径\n\t\t              beCombineMap: {}, // 已合并路径的，格式为beCombineMap[filePath] = 1;\n\t\t              fileCodeCache: {} // 已打过包的文件的代码，格式为fileCodeCache[filePath] = code \n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\n\n\t\t\treturn you;\n\t\t}\n\n第三步： 安装，参考上一例子\n\n第四步 通过配置`js_package_depend_style`就可使用了\n\n\tyou js_package_depend_style A -c\n\tyou -r\n\t\n=========\n\n> 当然，还可以开发一个属于自己的可视化操作界面，存储每个项目的参数，只需简单的切换就可以使用另一种配置参数来使用开发环境。\n\n\n",
  "readmeFilename": "README.md",
  "_id": "you@0.1.5",
  "dist": {
    "shasum": "2c3d3f4a6b0e4a94b7a5d6f00fd53852ef0baecd"
  },
  "_from": "you@",
  "_resolved": "https://registry.npmjs.org/you/-/you-0.1.5.tgz"
}
